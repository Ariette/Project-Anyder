// Fish info
            var bait = rLine[1].Trim();
            var start = rLine[2].Trim();
            var end = rLine[3].Trim();
            var transition = rLine[4].Trim();
            var weather = rLine[5].Trim();
            var predator = rLine[6].Trim();
            var tug = rLine[7].Trim();
            var hookset = rLine[8].Trim();

            switch (hookset)
            {
                case "Precision":
                    {
                        hookset = "精准提钩";
                        break;
                    }
                case "Powerful":
                    {
                        hookset = "强力提钩";
                        break;
                    }
            }

            var gathering = rLine[9].Trim();
            var snagging = rLine[10].Trim();
            var fishEyes = rLine[11].Trim();
            var ff14anglerId = rLine[12].Trim();
            var note = rLine[13].Trim();

            Console.WriteLine(name);
            var itemID = 0;

            // Fill item fishing information.
            try
            {
                var item = GetFishItem(name);

                dynamic spot = new JObject();
                if (currentFishingSpot != null)
                    spot.spot = currentFishingSpot.id;
                else if (currentNode != null)
                    spot.node = currentNode.id;

                // Sanity check weather and time restrictions.
                // Sanity check only applies to normal fishing spots.  The
                // fields aren't available for spearfishing yet.
                if (currentFishingSpot != null)
                    CheckConditions(name, item.fish, ref weather, ref transition, ref start, ref end);

                // Baits & Gigs
                if (bait.Contains("Gig Head"))
                {
                    if (spot.gig == null)
                        spot.gig = new JArray();
                    spot.gig.Add(bait);
                }
                else if (!string.IsNullOrEmpty(bait))
                {
                    //bait = clayManager.getItemNameChs(bait.Trim());
                    spot.tmpBait = bait;

                    foreach (string possibleBaitRaw in bait.Split(','))
                    {
                        string possibleBait = possibleBaitRaw.Trim();
                        if (name == possibleBait)
                            continue;
                        // If not otherwise specified, fish should inherit the time
                        // and weather restrictions of restricted bait (like predators).
                        if (!_builder.Db.ItemsByEnName.TryGetValue(possibleBait, out var baitItem))
                            throw new InvalidOperationException($"Can't find bait {possibleBait} for {name} at {currentFishingSpot.en.name}.  Is the spelling correct?");

                        if (baitItem.fish != null)
                        {
                            dynamic baitSpotView = ((JArray)baitItem.fish?.spots)?.FirstOrDefault(s => s["spot"] == spot.spot && s["node"] == spot.node);
                            if (baitSpotView == null)
                                throw new InvalidOperationException($"Can't find mooch {possibleBait} for {name} at {currentFishingSpot.en.name}.  Did you forget to add it to the spot?");

                            InheritConditions(spot, baitSpotView, weather, transition, start, end);
                        }
                    }
                }

                // Time restrictions
                if (start != "" || end != "")
                {
                    spot.during = new JObject();
                    if (start != "")
                        spot.during.start = int.Parse(start);
                    if (end != "")
                        spot.during.end = int.Parse(end);
                }

                // Weather restrictions
                if (transition != "")
                {
                    var transitionList = transition.Split(_comma, StringSplitOptions.None);
                    for (int i = 0; i < transitionList.Length; i++)
                    {
                        transitionList[i] = _builder.Db.WeatherByEnName[transitionList[i]];
                    }
                    CheckWeather(transitionList);
                    spot.transition = new JArray(transitionList);
                }

                if (weather != "")
                {
                    var weatherList = weather.Split(_comma, StringSplitOptions.None);
                    for (int i = 0; i < weatherList.Length; i++)
                    {
                        weatherList[i] = _builder.Db.WeatherByEnName[weatherList[i]];
                    }
                    CheckWeather(weatherList);
                    spot.weather = new JArray(weatherList);
                }

                // Predators
                if (predator != "")
                {
                    var tokens = predator.Split(_comma, StringSplitOptions.None);
                    spot.predator = new JArray();
                    for (var i = 0; i < tokens.Length; i += 2)
                    {
                        var predatorName = tokens[i];
                        //var predatorID = clayManager.getItemID(predatorName);
                        spot.predator.Add(BuildPredator(predatorName, tokens[i + 1]));

                        // If not otherwise specified, fish should inherit the time
                        // and weather restrictions of restricted predators (like bait).
                        var predatorItem = _builder.Db.ItemsByEnName[predatorName];
                        //var predatorItem = _builder.Db.ItemsById[predatorID];
                        if (predatorItem.fish != null)
                        {
                            var predatorSpots = (JArray)predatorItem.fish.spots;
                            dynamic predatorSpotView = predatorSpots.FirstOrDefault(s => s["spot"] == spot.spot && s["node"] == spot.node);
                            if (predatorSpotView == null)
                            {
                                // Predators for spearfishing nodes may not exist on this spot/node.
                                // Fallback to any available spot.
                                predatorSpotView = predatorSpots.FirstOrDefault();
                                if (predatorSpotView == null)
                                    throw new InvalidOperationException($"Can't find predator view for {name} predator {predatorName}.");
                            }

                            InheritConditions(spot, predatorSpotView, weather, transition, start, end);
                        }
                    }
                }

                // Other properties.
                if (hookset != "")
                    spot.hookset = hookset;
                if (tug != "")
                {
                    switch (tug)
                    {
                        case "!":
                        case "Light":
                            spot.tug = "轻杆";
                            break;
                        case "!!":
                        case "Medium":
                            spot.tug = "中杆";
                            break;
                        case "!!!":
                        case "Heavy":
                            spot.tug = "重杆";
                            break;
                        default:
                            spot.tug = tug;
                            break;
                    }
                }
                if (gathering != "")
                    spot.gatheringReq = int.Parse(gathering);
                if (snagging != "")
                    spot.snagging = 1;
                if (fishEyes != "")
                    spot.fishEyes = 1;
                if (ff14anglerId != "")
                    spot.ff14anglerId = int.Parse(ff14anglerId);
                if (note != "")
                    spot.note = note;

                // Add the fish to this gathering point if it's not otherwise there.

                if (currentFishingSpot != null && !currentFishingSpotItems.Any(i => (int)i["id"] == (int)item.id))
                {
                    if (item.fishingSpots == null)
                        item.fishingSpots = new JArray();
                    item.fishingSpots.Add(currentFishingSpot.id);

                    dynamic obj = new JObject();
                    obj.id = item.id;
                    obj.lvl = item.ilvl;
                    currentFishingSpot.items.Add(obj);
                    _builder.Db.AddReference(currentFishingSpot, "item", (int)item.id, false);
                    _builder.Db.AddReference(item, "fishing", (int)currentFishingSpot.id, true);
                }

                if (currentNode != null && !currentNodeItems.Any(i => (int)i["id"] == (int)item.id))
                {
                    if (item.nodes == null)
                        item.nodes = new JArray();
                    item.nodes.Add(currentNode.id);

                    dynamic obj = new JObject();
                    obj.id = item.id;
                    currentNodeItems.Add(obj);
                    _builder.Db.AddReference(currentNode, "item", (int)item.id, false);
                    _builder.Db.AddReference(item, "node", (int)currentNode.id, true);
                }

            }